//#domain
//cpp imports here
#include "SymbolTable.h"
#include "CodeGenerator.h"
#include <wchar.h>
#include <iostream>
//#enddomain

COMPILER Zoso

    int plus, minus, times, slash, equals, lessThan, greaterThan, assign; // Operators
    int undef, integer, boolean, decimal; // types
    int var, function; //Object Kinds


    int ADD, SUB, MUL, DIV, EQU, LSS, GTR, ASSIGN, // operation codes
        LOAD, CONST, FCALL, RETURN, GOTO, GOTOF, STORE, READ, WRITE, PRINT, NEQU, PARENTHESIS;

    void InitDeclarations() {
        plus = 0, minus = 1, times = 2, slash = 3, equals = 4, lessThan = 5, greaterThan = 6, assign = 7;
        undef = 0, integer = 1, boolean = 2, decimal = 3;
        var = 0, function = 1;

        // Operational Codes
        ADD = 0, SUB = 1, MUL = 2, DIV = 3, EQU = 4, LSS = 5, GTR = 6, ASSIGN = 7;
        LOAD = 8; CONST = 9; FCALL = 10; RETURN = 11; GOTO = 12; GOTOF = 13; STORE = 14; 
        READ = 15; WRITE = 16; PRINT = 17; NEQU = 18, PARENTHESIS = 19;
    }

    SymbolTable* symbolTable;
    CodeGenerator* codeGenerator;

CHARACTERS
    letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
    digit = "0123456789".
    quote = '"'.
    cr  = '\r'.
    lf  = '\n'.
    tab = '\t'.
    space = ' '.

TOKENS
    ident = letter { letter | digit }.
    string = quote { letter | digit } quote.
    number = ['-'] digit {digit}.
    float = ['-'] digit {digit} '.' digit {digit}. 

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n' 

IGNORE cr + lf + tab + space

PRODUCTIONS
    Ident<wchar_t* &name> = 
        ident (. name = coco_string_create(t -> val); .)
    .

    AddOp<int& op> = 
        '+' (. op = ADD; codeGenerator -> operatorStack.push(op); .) 
        | '-' (. op = SUB; codeGenerator -> operatorStack.push(op); .)
    .

    MulOp<int& op> = 
        '*' (. op = MUL; codeGenerator -> operatorStack.push(op); .) 
        | '/' (. op = DIV; codeGenerator -> operatorStack.push(op); .)
    .

    RelOp<int& op> = 
        "==" (. op = EQU; codeGenerator -> operatorStack.push(op); .)
        | '<'  (. op = GTR; codeGenerator -> operatorStack.push(op); .)
        | '>'  (. op = LSS; codeGenerator -> operatorStack.push(op); .)
        | "!=" (. op = NEQU; codeGenerator -> operatorStack.push(op); .)
    .

    VariableDeclaration (. wchar_t* name; int type; .) = 
        Type<type>
        Ident<name> (. symbolTable -> NewObj(name, var, type); .)
        {',' Ident<name> (. symbolTable -> NewObj(name, var, type); .) } 
        ';'
    .

    Type<int &type> = ( 
        "int" (. type = integer; .)
        | "boolean" (. type = boolean; .)
        | "float" (. type = decimal; .)
        | "void" (. type = undef; .)
    ).

    FunctionDeclaration (. wchar_t* name; int type; .) = 
        "function" Type<type>  
        Ident<name> (. symbolTable -> NewObj(name, function, type); .)
        '(' ')' 
        '{'{ Statement }'}' 
    .

    IfCase (. int type; .) = 
        "if" '(' LogicalExpresion<type> ')' '{'
            (. 
                type = codeGenerator -> typeStack.top();
                codeGenerator -> typeStack.pop();

                int result = codeGenerator -> operandStack.top();
                codeGenerator -> operandStack.pop();

                codeGenerator -> code.push_back({GOTO, result, 0, 0});

                codeGenerator -> jumpStack.push(static_cast<int>(codeGenerator -> code.size()) - 1);
            .)
            { Statement }
        '}'
        [ "else" (. 
            int gotofStack = codeGenerator -> jumpStack.top();
            codeGenerator -> jumpStack.pop();
            codeGenerator -> jumpStack.push(static_cast<int>(codeGenerator -> code.size()) - 1);
            codeGenerator -> code.push_back({GOTOF, gotofStack, static_cast<int>(codeGenerator -> code.size()), 0});
        .) '{' 
            { Statement } 
        '}']
        (. 
            int end = codeGenerator -> jumpStack.top();
            codeGenerator -> jumpStack.pop();
            codeGenerator -> code[end] = {GOTOF, result, end, 0};
        .)
    .

    WhileLoop (. int type; .) = 
        "while" '(' LogicalExpresion<type> ')' '{' 
            { Statement } 
        '}'
    .
    //for loops

    VariableAssignation (. int type; wchar_t* name; Obj obj; .) = 
        Ident<name> (.
            obj = symbolTable -> Find(name);
            type = obj.type;
            codeGenerator -> operandStack.push(obj.address);
            codeGenerator -> typeStack.push(type); 
            int newtype = undef;
        .) 
        '=' (. codeGenerator -> operatorStack.push(ASSIGN); .)
        LogicalExpresion<newtype> (. codeGenerator -> getAssignResultType(newtype); ; .)
        ';'
    .

    Statement = 
        VariableAssignation
        | IfCase
        | WhileLoop
    .

    LogicalExpresion<int& type> (. int nextType; int op;.) = 
        SimExpr<type> { RelOp<op> SimExpr<nextType> (. 
                codeGenerator -> getRelOpResultType(nextType); 
        .)} 
    .

    SimExpr<int& type> (. int nextType, op; .) =  
        Term<type> { 
            AddOp<op> 
            Term<nextType> (. 
                codeGenerator -> getAddOpResultType(nextType);
            .)
        }
    .

    Term<int& type> (. int nextType, op; .) =
        Factor<type> { 
            MulOp<op> 
            Factor<nextType> (. 
                codeGenerator -> getMulOpResultType(nextType); 
            .)
        }
    .

    Factor<int& type> (. wchar_t* name;  Obj obj;  int numberReference; float decimalReference;.) = 
        (. type = undef; .)
        float (. 
            type = decimal; 
            wchar_t * pEnd;
            decimalReference = wcstof(t -> val, &pEnd); 
            int tempMemory = codeGenerator -> avail -> next();
            codeGenerator -> operandStack.push(tempMemory); 
            codeGenerator -> typeStack.push(type); 
            codeGenerator -> constantMap[tempMemory] = decimalReference;
        .) 
        | number (. 
            type = integer; 
            swscanf(t -> val, L"%d", &numberReference); 
            int tempMemory = codeGenerator -> avail -> next();
            codeGenerator -> operandStack.push(tempMemory); 
            codeGenerator -> typeStack.push(type); 
            codeGenerator -> constantMap[tempMemory] = numberReference;
        .) 
        | "false" (. 
            type = boolean;
            int tempMemory = codeGenerator -> avail -> next();
            codeGenerator -> operandStack.push(tempMemory); 
            codeGenerator -> typeStack.push(type);   
            codeGenerator -> constantMap[tempMemory] = false;  
        .)
        | "true" (.
            type = boolean;
            int tempMemory = codeGenerator -> avail -> next();
            codeGenerator -> operandStack.push(tempMemory); 
            codeGenerator -> typeStack.push(type);   
            codeGenerator -> constantMap[tempMemory] = true;    
        .)
        | Ident<name> (.
                obj = symbolTable -> Find(name);
                type = obj.type;
                codeGenerator -> operandStack.push(obj.address);
                codeGenerator -> typeStack.push(obj.type);
            .) 
            // [IF( obj.kind == function ) 
            //     '(' [ 
            //         (. int& typeFunctionVar = undef; .)
            //         Factor<typeFunctionVar> { 
            //             (. int& typeFunctionSubsequentVar = undef; .)
            //              ',' Factor<typeFunctionSubsequentVar> 
            //         }
            //     ] ')' 
            // ] 
            (.
                if (obj.kind != var) throw std::invalid_argument("identifier not a variable");  //use symbol table use else if when functions
            .)
        |  '(' (. codeGenerator -> operatorStack.push(PARENTHESIS); .) 
                SimExpr<type> 
            ')' (. codeGenerator -> operatorStack.pop(); .) 
        | '-' Factor<type>
    .

    Zoso (. wchar_t* name; InitDeclarations(); .) = 
        "Program" Ident<name> ';'
        { FunctionDeclaration | VariableDeclaration }
        { Statement }
    .
END Zoso.

/*-------------------
TODO:

FIX TYPE BUG ASSIGN CHECK TODO IN ASSIGN OP TYPE CODE GENERATOR METHOD

CREATE VIRTUAL MACHINE

CREATE PRINTS

FOR LOOPS -> GRAMMAR AND EVERYTHING ELSE

WHILE LOOPS QUADS

-----------------------------------------------------*/
